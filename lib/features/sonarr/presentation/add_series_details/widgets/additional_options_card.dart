import 'package:client/features/sonarr/data/add_series_details_provider/add_series_details_provider.dart';import 'package:flutter/material.dart';import 'package:flutter_riverpod/flutter_riverpod.dart';import 'package:sonarr_flutter/sonarr_flutter.dart';class AdditionalOptionsCard extends ConsumerWidget {  const AdditionalOptionsCard({super.key, required this.series});  final SonarrSeriesLookup series;  @override  Widget build(BuildContext context, WidgetRef ref) {    final provider = addSeriesDetailsNotifierProvider(series);    final state = ref.watch(provider);    final notifier = ref.read(provider.notifier);    final theme = Theme.of(context);    return Card(      elevation: 2,      shape: RoundedRectangleBorder(        borderRadius: BorderRadius.circular(12.0),      ),      child: Padding(        padding: const EdgeInsets.all(16.0),        child: Column(          crossAxisAlignment: CrossAxisAlignment.start,          children: [            Text(              'Additional Options',              style: theme.textTheme.titleLarge?.copyWith(                fontWeight: FontWeight.bold,              ),            ),            const SizedBox(height: 8),            Padding(              padding: const EdgeInsets.symmetric(vertical: 8.0),              child: Row(                crossAxisAlignment: CrossAxisAlignment.center,                children: [                  const Expanded(                    child: Column(                      crossAxisAlignment: CrossAxisAlignment.start,                      children: [                        Text(                          'Use Season Folder',                          style: TextStyle(fontSize: 16.0),                        ),                        SizedBox(height: 4),                        Text(                          'Organize episodes into season folders',                          style: TextStyle(                            fontSize: 14.0,                            color: Colors.grey,                          ),                        ),                      ],                    ),                  ),                  Switch(                    value: state.seasonFolder,                    activeColor: theme.colorScheme.primary,                    onChanged: (value) {                      notifier.setSeasonFolder(value);                    },                  ),                ],              ),            ),            const Divider(height: 1),            Padding(              padding: const EdgeInsets.symmetric(vertical: 8.0),              child: Row(                crossAxisAlignment: CrossAxisAlignment.center,                children: [                  const Expanded(                    child: Column(                      crossAxisAlignment: CrossAxisAlignment.start,                      children: [                        Text('Monitored', style: TextStyle(fontSize: 16.0)),                        SizedBox(height: 4),                        Text(                          'Monitor this series for new episodes',                          style: TextStyle(                            fontSize: 14.0,                            color: Colors.grey,                          ),                        ),                      ],                    ),                  ),                  Switch(                    value: state.monitored,                    activeColor: theme.colorScheme.primary,                    onChanged: (value) {                      notifier.setMonitored(value);                    },                  ),                ],              ),            ),            const Divider(height: 1),            Padding(              padding: const EdgeInsets.symmetric(vertical: 8.0),              child: Row(                crossAxisAlignment: CrossAxisAlignment.center,                children: [                  const Expanded(                    child: Column(                      crossAxisAlignment: CrossAxisAlignment.start,                      children: [                        Text(                          'Search for Missing Episodes',                          style: TextStyle(fontSize: 16.0),                        ),                        SizedBox(height: 4),                        Text(                          'Search for all missing episodes when adding the series',                          style: TextStyle(                            fontSize: 14.0,                            color: Colors.grey,                          ),                        ),                      ],                    ),                  ),                  Switch(                    value: state.searchForMissingEpisodes,                    activeColor: theme.colorScheme.primary,                    onChanged: (value) {                      notifier.setSearchForMissingEpisodes(value);                    },                  ),                ],              ),            ),            const Divider(height: 1),            Padding(              padding: const EdgeInsets.symmetric(vertical: 8.0),              child: Row(                crossAxisAlignment: CrossAxisAlignment.center,                children: [                  const Expanded(                    child: Column(                      crossAxisAlignment: CrossAxisAlignment.start,                      children: [                        Text(                          'Search Cutoff Unmet Episodes',                          style: TextStyle(fontSize: 16.0),                        ),                        SizedBox(height: 4),                        Text(                          'Search for episodes that don\'t meet cutoff quality requirements',                          style: TextStyle(                            fontSize: 14.0,                            color: Colors.grey,                          ),                        ),                      ],                    ),                  ),                  Switch(                    value: state.searchForCutoffUnmetEpisodes,                    activeColor: theme.colorScheme.primary,                    onChanged: (value) {                      notifier.setSearchForCutoffUnmetEpisodes(value);                    },                  ),                ],              ),            ),          ],        ),      ),    );  }}